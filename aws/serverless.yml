# serverless.yml
service: results-render

provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    HOST_BUCKET: ${self:service}-${self:provider.stage}-host-bucket

resources:
  Resources:
# Bucket to hold static stuff
# After doing: serverless deploy, use aws s3 sync [local directory] [bucketname] (scripted) to
# populate the static content into the bucket.
    WebAppstaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.HOST_BUCKET}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppStaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppstaticBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.HOST_BUCKET}/*

# Cloudfront distribution, which wraps the API Gateway, and the S3 bucket, as different origins
    myDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: "true"
          DefaultRootObject: "index.html"
# The default caching applies to the default (root) objects, not to images etc...
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            MinTTL: "0"
            MaxTTL: "0"
            DefaultTTL: "0"
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
# Here we define two behaviours of how we cache responses
          CacheBehaviors:
          - AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: "false"
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: "0"
            MaxTTL: "6"
            DefaultTTL: "3"
            PathPattern: /*
# Here we define the API origin
          Origins:
# Here's the origin from S3...
            - DomainName: ${self:provider.environment.HOST_BUCKET}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: myS3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    -
                      - 'origin-access-identity/cloudfront/'
                      - Ref: cloudfrontoriginaccessidentity
    cloudfrontoriginaccessidentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Public"
